apiVersion: apps/v1
kind: Deployment
metadata:
  name: ghanawaters-api
  labels:
    app: ghanawaters-api
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ghanawaters-api
  template:
    metadata:
      labels:
        app: ghanawaters-api
    spec:
      initContainers:
      - name: wait-for-migrations
        image: ghcr.io/ghananauticalnfo/ghanawaters-api:latest
        imagePullPolicy: Always
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Init container: Checking if database migrations are complete..."
            echo "Current directory: $(pwd)"
            cd /app
            
            # First check if datasource.js exists
            if [ ! -f "dist/apps/api/cli_build/datasource.js" ]; then
              echo "ERROR: datasource.js not found. This container may not have the CLI build."
              echo "Proceeding anyway as migrations should be handled by the Job..."
              exit 0
            fi
            
            max_attempts=60
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              echo "Running migration check (attempt $((attempt + 1))/$max_attempts)..."
              
              # Run migration:check and capture both output and exit code
              OUTPUT=$(npm run migration:check 2>&1)
              EXIT_CODE=$?
              
              # Log first few lines of output for debugging
              echo "Migration check output (first 5 lines):"
              echo "$OUTPUT" | head -5
              
              if [ $EXIT_CODE -ne 0 ]; then
                echo "ERROR: migration:check command failed with exit code $EXIT_CODE"
                # Check if it's a connection error
                if echo "$OUTPUT" | grep -q "ECONNREFUSED\|Connection refused\|connect ETIMEDOUT"; then
                  echo "Database connection failed - waiting for database to be ready..."
                else
                  echo "Non-connection error detected. Full output:"
                  echo "$OUTPUT"
                fi
              else
                # Command succeeded, check the output
                if echo "$OUTPUT" | grep -q "No migrations are pending"; then
                  echo "✓ Database is ready - all migrations applied!"
                  exit 0
                elif echo "$OUTPUT" | grep -E "^\[X\].*[0-9]+" > /dev/null; then
                  # TypeORM shows [X] for executed migrations
                  echo "✓ Database is ready - migrations show as executed!"
                  exit 0
                elif echo "$OUTPUT" | grep -q "migrations are pending"; then
                  PENDING_COUNT=$(echo "$OUTPUT" | grep -c "pending")
                  echo "Migrations are still pending (found $PENDING_COUNT pending migrations)"
                else
                  echo "Unexpected output from migration check, but command succeeded"
                  echo "Assuming migrations are complete and proceeding..."
                  exit 0
                fi
              fi
              
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "WARNING: Timeout after $max_attempts attempts. Proceeding anyway..."
            echo "This might indicate:"
            echo "1. Migration job hasn't completed yet"
            echo "2. Database connection issues"
            echo "3. migration:check command not working properly"
            exit 0
        env:
        - name: NODE_ENV
          value: "prod"  # Will be patched in overlays
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ghanawaters-postgres-secret
              key: DATABASE_URL
      containers:
      - name: ghanawaters-api
        image: ghcr.io/ghananauticalnfo/ghanawaters-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "prod"  # Will be patched in overlays
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ghanawaters-postgres-secret
              key: DATABASE_URL