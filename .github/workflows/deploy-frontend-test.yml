# File: .github/workflows/deploy-frontend-prod.yml
name: Build and Deploy Snapper Frontend to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/frontend/**'
      - 'libs/**'  # Include changes to shared libraries
      - 'package.json'
      - 'package-lock.json'
      - 'nx.json'
      - '.github/workflows/deploy-frontend-prod.yml'
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy-to-production" to confirm'
        required: true

jobs:
  check-affected:
    runs-on: ubuntu-latest
    outputs:
      is_affected: ${{ steps.check.outputs.is_affected }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for Nx affected commands

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Check if frontend is affected
        id: check
        run: |
          # Determine base of comparison (mainline branch)
          AFFECTED_ARGS="--base=origin/main~1 --head=HEAD"
          
          # Check if frontend is in the list of affected apps
          AFFECTED_APPS=$(npx nx affected:apps --plain ${AFFECTED_ARGS})
          echo "Affected apps: $AFFECTED_APPS"
          
          if echo "$AFFECTED_APPS" | grep -q "frontend"; then
            echo "Frontend app is affected!"
            echo "is_affected=true" >> $GITHUB_OUTPUT
          else
            echo "Frontend app is not affected"
            echo "is_affected=false" >> $GITHUB_OUTPUT
          fi
          
  build-and-push:
    needs: check-affected
    # Skip if not affected by changes and not manually triggered
    if: |
      needs.check-affected.outputs.is_affected == 'true' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for Nx affected commands
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ghananauticalinfo/snapper-frontend:latest
            ghananauticalinfo/snapper-frontend:prod-${{ github.sha }}
          build-args: |
            ENVIRONMENT=production
          
  deploy-prod:
    needs: [check-affected, build-and-push]
    runs-on: ubuntu-latest
    # Only run if build was executed or if manually triggered with confirmation
    if: |
      (needs.check-affected.outputs.is_affected == 'true' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment == 'deploy-to-production')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Save DigitalOcean kubeconfig
        run: |
          echo "Available Kubernetes clusters:"
          doctl kubernetes cluster list
          
          # Get the cluster ID instead of relying on exact name match
          CLUSTER_ID=$(doctl kubernetes cluster list --format ID,Name --no-header | grep ${{ secrets.PROD_CLUSTER_NAME }} | awk '{print $1}')
          
          if [ -z "$CLUSTER_ID" ]
          then
            echo "Could not find cluster with name containing ${{ secrets.PROD_CLUSTER_NAME }}"
            echo "Please check the PROD_CLUSTER_NAME secret and available clusters listed above"
            exit 1
          else
            echo "Found cluster ID: $CLUSTER_ID"
            doctl kubernetes cluster kubeconfig save $CLUSTER_ID
          fi
      
      - name: Deploy to Kubernetes
        run: |
          # Create directory structure if it doesn't exist
          mkdir -p k8s/prod
          
          # Copy the deployment file to the expected location
          cp apps/frontend/kubernetes/prod.yaml k8s/prod/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/prod/deployment.yaml
          
          # Update the container image
          kubectl set image deployment/snapper-frontend snapper-frontend=ghananauticalinfo/snapper-frontend:prod-${{ github.sha }} -n prod
          
          # Wait for rollout to complete
          kubectl rollout status deployment/snapper-frontend -n prod