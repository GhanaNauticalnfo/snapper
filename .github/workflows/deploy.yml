name: Build

on:
  push:
    branches: [develop, test, main]        # dev • test • prod
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [api, admin, frontend]        # three services, one env each

    env:
      REGISTRY: ghcr.io/ghananauticalnfo   # ← change to your GHCR namespace
      NODE_VERSION: 20

    steps:
    # ───────── determine environment from branch ─────────
      - name: Set CI_ENV
        id: env
        run: |
          case "${GITHUB_REF_NAME}" in
            develop) echo "CI_ENV=dev"  >>"$GITHUB_OUTPUT" ;;
            test)    echo "CI_ENV=test" >>"$GITHUB_OUTPUT" ;;
            *)       echo "CI_ENV=prod" >>"$GITHUB_OUTPUT" ;;
          esac

    # ───────── checkout & install deps ─────────
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

    # ───────── build (Nx) ─────────
      - name: Build ${{ matrix.app }}
        run: npx nx run ${{ matrix.app }}:build --configuration=${{ steps.env.outputs.CI_ENV }}

    # ───────── docker build & push ─────────
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::7}-${{ github.run_number }}" >>"$GITHUB_OUTPUT"

      - name: Set up Buildx (container driver)
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.4
          install: true

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/ghanawaters-${{ matrix.app }}:${{ steps.meta.outputs.TAG }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/ghanawaters-${{ matrix.app }}:cache
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/ghanawaters-${{ matrix.app }}:cache,mode=max

    # ───────── patch overlay & commit ─────────
      - name: Install yq v4
        run: |
          YQ_VERSION="v4.44.1"
          curl -sSL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" \
            -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Bump tag in kustomization
        run: |
          CI_ENV="${{ steps.env.outputs.CI_ENV }}"
          IMAGE_PATH="k8s/overlays/${CI_ENV}/kustomization.yaml"
          IMAGE_NAME="${{ env.REGISTRY }}/ghanawaters-${{ matrix.app }}"
          NEW_TAG="${{ steps.meta.outputs.TAG }}"

          yq eval -i '
            (.images[] | select(.name == strenv(IMAGE_NAME))).newTag = strenv(NEW_TAG)
          ' "$IMAGE_PATH"

          echo "IMAGE_PATH=$IMAGE_PATH" >>"$GITHUB_ENV"

      - name: Commit & push change
        env:
          GIT_AUTHOR_NAME:  ci
          GIT_AUTHOR_EMAIL: ci@github
          APP:  ${{ matrix.app }}
          TAG:  ${{ steps.meta.outputs.TAG }}
          CI_ENV: ${{ steps.env.outputs.CI_ENV }}
        run: |
          git config user.name  "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add "$IMAGE_PATH"

          if git diff --cached --quiet; then
            echo "No overlay change – nothing to commit."
          else
            git commit -m "[skip ci] ${CI_ENV}: bump ${APP} to ${TAG}"
            git push
          fi
