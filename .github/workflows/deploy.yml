name: Build & Deploy

on:
  push:
    branches: [develop, test, main]     # dev • test • prod
  workflow_dispatch:

permissions: { contents: write, packages: write }

env:
  REGISTRY: ghcr.io/ghananauticalnfo
  NODE_VERSION: 20

# ────────────── 1. BUILD  (parallel per-app) ────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, frontend] }

    steps:
      # pick env from branch
      - name: set CI_ENV
        id: env
        run: |
          case "${GITHUB_REF_NAME}" in
            develop) CI_ENV=dev ;;
            test)    CI_ENV=test ;;
            *)       CI_ENV=prod ;;
          esac
          echo "CI_ENV=$CI_ENV" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - run: npm ci

      - name: build ${{ matrix.app }}
        run: npx nx run ${{ matrix.app }}:build --configuration=${{ steps.env.outputs.CI_ENV }}

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v3
        with: { driver-opts: image=moby/buildkit:v0.12.4, install: true }

      - name: build & push image
        env: { TAG: "${{ github.sha }}" }
        run: |
          TAG="${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          docker buildx build \
            --cache-from type=registry,ref=${REGISTRY}/ghanawaters-${{ matrix.app }}:cache \
            --cache-to   type=registry,ref=${REGISTRY}/ghanawaters-${{ matrix.app }}:cache,mode=max \
            --build-arg BUILD_TIME="${BUILD_TIME}" \
            --build-arg BUILD_TAG="${TAG}" \
            --build-arg ENVIRONMENT="${{ steps.env.outputs.CI_ENV }}" \
            --file apps/${{ matrix.app }}/Dockerfile \
            --tag ${REGISTRY}/ghanawaters-${{ matrix.app }}:$TAG \
            --push .

# ────────────── 2. PATCH & COMMIT (single) ──────────────────────────────
  patch:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: compute TAG again
        id: tag
        run: echo "TAG=${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: install yq v4
        run: |
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 \
            -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

      - name: patch kustomization
        run: |
          case "${GITHUB_REF_NAME}" in
            develop) CI_ENV=dev ;; test) CI_ENV=test ;; *) CI_ENV=prod ;;
          esac
          FILE="k8s/overlays/${CI_ENV}/kustomization.yaml"
          export TAG="${{ steps.tag.outputs.TAG }}"

          for APP in api admin frontend; do
            export IMAGE="${REGISTRY}/ghanawaters-${APP}"
            yq eval -i '
              (.images[] | select(.name == strenv(IMAGE))).newTag = strenv(TAG)
            ' "$FILE"
          done

          echo "PATCHED_FILE=$FILE" >> "$GITHUB_ENV"

      - name: Debug – show images after patch
        run: yq e '.images[] | .name + " → " + .newTag' "$PATCHED_FILE"

      - name: commit once
        env:
          FILE: ${{ env.PATCHED_FILE }}
          TAG:  ${{ steps.tag.outputs.TAG }}
        run: |
          git config user.name  "ci"
          git config user.email "ci@github"
          git add "$FILE"
          if git diff --cached --quiet; then
            echo "Nothing to commit."
          else
            git commit -m "[skip ci] bump images to $TAG"
            git push
          fi
